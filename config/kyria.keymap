/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    combos {
        compatible = "zmk,combos";

        enter_kl {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
        };

        backspace_jl {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 21>;
        };

        backspace_jk {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        tab_df {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
        };

        escape_uio {
            bindings = <&kp ESCAPE>;
            key-positions = <7 8 9>;
        };

        enter_sd {
            bindings = <&kp ENTER>;
            key-positions = <14 15>;
        };

        space_fg {
            bindings = <&kp SPACE>;
            key-positions = <16 17>;
        };

        escape_wer {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3 4>;
        };

        backspace_sf {
            bindings = <&kp BACKSPACE>;
            key-positions = <14 16>;
        };

        delete_xf {
            bindings = <&kp DELETE>;
            key-positions = <26 16>;
        };
    };

    /*
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };
*/

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | L SHIFT | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
  &none   &kp Q   &kp W   &kp E   &kp R       &kp T                                                &kp Y   &kp U      &kp I    &kp O             &kp P   &none
  &none   &kp A   &kp S   &kp D   &kp F       &kp G                                                &kp H   &kp J      &kp K    &kp L  &kp SINGLE_QUOTE   &none
  &none   &kp Z   &kp X   &kp C   &kp V       &kp B  &kp LSHFT  &kp LSHFT   &kp LSHFT  &kp LSHFT   &kp N   &kp M  &kp COMMA  &kp DOT          &kp FSLH   &none
                          &none  &trans  &kp LSHIFT      &mo 1      &mo 3  &kp RSHIFT  &kp SPACE   &mo 2  &trans      &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        num_sym {
            bindings = <
  &none  &kp GRAVE       &kp LBKT   &kp LBRC   &kp RBRC  &kp RBKT                                            &kp LPAR   &kp N7  &kp N8  &kp N9  &kp RPAR   &none
  &none   &kp LPAR  &kp SEMICOLON  &kp MINUS  &kp EQUAL  &kp RPAR                                           &kp MINUS   &kp N4  &kp N5  &kp N6   &kp SQT   &none
  &none    &kp DQT      &kp COLON  &kp UNDER   &kp PLUS  &kp BSLH  &trans  &trans        &trans  &kp EQUAL   &kp PLUS   &kp N1  &kp N2  &kp N3  &kp FSLH   &none
                                       &none     &trans    &trans  &trans  &trans  &mt RSHFT N0  &kp SPACE     &trans  &kp DOT   &none
            >;
        };

        nav {
            bindings = <
  &none  &trans  &trans  &trans  &trans  &trans                                  &kp HOME    &kp PG_DN      &kp PG_UP     &kp END  &trans   &none
  &none  &trans  &trans  &trans  &trans  &trans                                  &kp LEFT     &kp DOWN         &kp UP   &kp RIGHT  &trans   &none
  &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp K_CMENU  &kp BACKSPACE  &kp DELETE  &trans   &none
                          &none  &trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans          &none
            >;
        };

        util {
            bindings = <
  &none  &kp LG(Q)  &kp LG(W)  &kp LG(E)  &kp LG(R)    &kp LG(T)                                  &kp C_PREV  &kp C_NEXT  &kp C_PLAY_PAUSE  &kp C_BRI_DN  &kp C_BRI_UP   &none
  &none  &kp LG(A)  &kp LG(S)  &kp LG(D)  &kp LG(F)    &kp LG(G)                                      &trans      &trans            &trans        &trans        &trans   &none
  &none  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)    &kp LG(B)  &trans  &trans  &trans  &trans      &trans      &trans            &trans        &trans        &trans   &none
                                   &none     &trans  &kp C_POWER  &trans  &trans  &trans  &trans      &trans      &trans             &none
            >;
        };

        fn {
            bindings = <
 &trans    &bt BT_CLR        &trans        &trans        &trans        &trans                                  &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans
 &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                  &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
 &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                                           &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
